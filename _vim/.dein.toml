[[plugins]]
repo = 'Shougo/dein.vim'

# [[plugins]]
# repo = 'Shougo/vimproc.vim'
# hook_post_update = '''
#   if has('win32')
#     let cmd = 'tools\\update-dll-mingw'
#   elseif has('win32unix') " for Cygwin
#     let cmd = 'make -f make_cygwin.mak'
#   elseif executable('gmake')
#     let cmd = 'gmake'
#   else
#     let cmd = 'make'
#   endif
#   let g:dein#plugin.build = cmd
# '''

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
  let g:lightline = {
    \ 'colorscheme': 'solarized',
    \ 'active': {
    \   'left': [ [ 'mode', 'paste' ],
    \             [ 'fugitive', 'readonly', 'filename', 'modified' ] ]
    \ },
    \ 'component': {
    \   'readonly': '%{&filetype=="help"?"":&readonly?"X":""}',
    \   'modified': '%{&filetype=="help"?"":&modified?"+":&modifiable?"":"-"}',
    \   'fugitive': '%{exists("*fugitive#head")?fugitive#head():""}'
    \ },
    \ 'component_visible_condition': {
    \   'readonly': '(&filetype!="help"&& &readonly)',
    \   'modified': '(&filetype!="help"&&(&modified||!&modifiable))',
    \   'fugitive': '(exists("*fugitive#head") && ""!=fugitive#head())'
    \ },
    \ }
'''

[[plugins]]
repo = 'wakatime/vim-wakatime'

# [[plugins]]
# repo = 'Shougo/neomru.vim'

# [[plugins]]
# repo = 'Shougo/vimfiler.vim'
# rev = 'ver.4.2'
# depends = 'neomru.vim'
# hook_add = '''
#   " VimFilerを :e . で起動させる
#   let g:vimfiler_as_default_explorer = 1
#   " セーフモードを解除
#   let g:vimfiler_safe_mode_by_default = 0
# '''

# [[plugins]]
# repo = 'Shougo/unite.vim'
# depends = 'neomru.vim'
# hook_add = '''
#   let g:unite_source_history_yank_enable =1
#   let g:unite_source_file_mru_limit = 200
#   nnoremap <silent> ,uy :<C-u>Unite history/yank<CR>
#   nnoremap <silent> ,ub :<C-u>Unite buffer<CR>
#   nnoremap <silent> ,uf :<C-u>UniteWithBufferDir -buffer-name=files file<CR>
#   nnoremap <silent> ,ur :<C-u>Unite -buffer-name=register register<CR>
#   nnoremap <silent> ,uu :<C-u>Unite file_mru buffer<CR>
# 
#   " Ctrl+p でファイル検索を起動(CtrlP.vim風)
#   " http://blog.sasaplus1.com/2015/03/29/01/
#   nmap <expr><C-p> ":<C-u>execute \
#       \ 'Unite'
#       \ '-start-insert'
#       \ 'file:'.fnameescape(expand('%:p:h'))
#       \ (isdirectory(getcwd().'/.git') ?
#       \      'file_rec/git:--cached:--others:--exclude-standard' :
#       \      'file_rec/async')
#       \ <CR>"
# 
#   " 検索対象外とするパターンを設定し、ファイル検索を高速化
#   let s:unite_ignore_file_rec_patterns=
#       \ ''
#       \ .'vendor/bundle\|.bundle/\|\.sass-cache/\|'
#       \ .'node_modules/\|bower_components/\|'
#       \ .'\.\(bmp\|gif\|jpe\?g\|png\|webp\|ai\|psd\)"\?$'
#   call unite#custom#source(
#       \ 'file_rec/async,file_rec/git',
#       \ 'ignore_pattern',
#       \ s:unite_ignore_file_rec_patterns)
# '''

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'machakann/vim-swap'

#[[plugins]]
#repo = 'powerman/vim-plugin-AnsiEsc'

# choose plugin
[[plugins]]
repo = 't9md/vim-choosewin'
hook_add = '''
  let g:choosewin_overlay_enabled = 1
  let g:choosewin_overlay_clear_multibyte = 1
'''

# deno環境 for ddc, ddu, and other dd*
[[plugins]]
repo = 'vim-denops/denops.vim'

# ポップアップウィンドウを表示するプラグイン
[[plugins]]
repo = 'Shougo/pum.vim'

# ----- Fazy Finder ddu "Dark deno-powered UI" -----

[[plugins]]
repo = 'Shougo/ddu.vim'
depends = ['denops.vim']
# TODO: ui のカスタマイズしたい！
hook_add = '''
  call ddu#custom#patch_global({
    \   'ui': 'ff',
    \   'sources': [{'name': 'file_rec', 'params': {'ignoredDirectories': ['.git', 'node_modules', 'vendor']}},
    \      {'name': 'mr'},
    \      {'name': 'register'},
    \      {'name': 'file', 'params':{}},
    \      {'name': 'colorscheme'},
    \      {'name': 'buffer'}],
    \   'sourceOptions': {
    \     '_': {
    \       'matchers': ['matcher_substring'],
    \     },
    \   },
    \   'kindOptions': {
    \     'file': {
    \       'defaultAction': 'open',
    \     },
    \     'colorscheme': {
    \       'defaultAction': 'set',
    \     },
    \   },
    \   'uiParams': {
    \      'ff': {
    \         'startFilter': v:false,
    \         'prompt': '> ',
    \         'split': 'floating',
    \      },
    \   },
    \   'filterParams': {
    \      'matcher_substring': {
    \          'highlightMatched': 'Search',
    \      },
    \   },
    \ })

  " grep  -- https://alpacat.com/blog/my-ddu-settings
  call ddu#custom#patch_local('grep', {
    \   'sourceParams' : {
    \     'rg' : {
    \       'args': ['--column', '--no-heading', '--color', 'never'],
    \     },
    \   },
    \   'uiParams': {
    \     'ff': {
    \       'startFilter': v:false,
    \     }
    \   },
    \ })

  autocmd FileType ddu-ff call s:ddu_my_settings()
  function! s:ddu_my_settings() abort
    nnoremap <buffer><silent> <CR>
          \ <Cmd>call ddu#ui#ff#do_action('itemAction')<CR>
    nnoremap <buffer><silent> <Space>
          \ <Cmd>call ddu#ui#ff#do_action('toggleSelectItem')<CR>
    nnoremap <buffer><silent> i
          \ <Cmd>call ddu#ui#ff#do_action('openFilterWindow')<CR>
    nnoremap <buffer><silent> q
          \ <Cmd>call ddu#ui#ff#do_action('quit')<CR>
  endfunction

  autocmd FileType ddu-ff-filter call s:ddu_filter_my_settings()
  function! s:ddu_filter_my_settings() abort
    inoremap <buffer><silent> <CR>
    \ <Esc><Cmd>close<CR>
    nnoremap <buffer><silent> <CR>
    \ <Cmd>close<CR>
    nnoremap <buffer><silent> q
    \ <Cmd>close<CR>
  endfunction

  "ddu keymapping.
  nnoremap <SID>[ug] <Nop>
  nmap ,u <SID>[ug]

  nnoremap <silent> <SID>[ug]m :<C-u>Ddu mr<CR>
  nnoremap <silent> <SID>[ug]u :<C-u>Ddu mr<CR>
  nnoremap <silent> <SID>[ug]b :<C-u>Ddu buffer<CR>
  nnoremap <silent> <SID>[ug]r :<C-u>Ddu register<CR>
  nnoremap <silent> <SID>[ug]n :<C-u>Ddu file -source-param-new -volatile<CR>
  nnoremap <silent> <SID>[ug]f :<C-u>Ddu file_rec<CR>

  nmap <silent> ;g <Cmd>call ddu#start({
    \   'name': 'grep',
    \   'sources':[
    \     {'name': 'rg', 'params': {'input': expand('<cword>')}}
    \   ],
    \ })<CR>
'''

[[plugins]]
repo='Shougo/ddu-ui-ff'
depends = ['ddu.vim']
[[plugins]]
repo='Shougo/ddu-source-file_rec'
depends = ['ddu.vim']
[[plugins]]
repo='Shougo/ddu-source-file'
depends = ['ddu.vim']
[[plugins]]
repo='Shougo/ddu-source-register'
depends = ['ddu.vim']
[[plugins]]
repo='shun/ddu-source-buffer'
depends = ['ddu.vim']
[[plugins]]
repo='shun/ddu-source-rg'
depends = ['ddu.vim']
[[plugins]]
repo='kuuote/ddu-source-mr'
depends = ['ddu.vim']
[[plugins]]
repo='4513ECHO/ddu-source-colorscheme'
depends = ['ddu.vim']
[[plugins]]
repo='Shougo/ddu-filter-matcher_substring'
depends = ['ddu.vim']
[[plugins]]
repo='Shougo/ddu-kind-file'
depends = ['ddu.vim']
[[plugins]]
repo='Shougo/ddu-commands.vim'
depends = ['ddu.vim']


# ----- ddu Filer -----
# https://zenn.dev/shougo/articles/ddu-ui-filer
# 2022-06-24 ddu-ui-filer はまだ開発途中なので導入見送り
#[[plugins]]
#repo='Shougo/ddu-column-filename.vim'
#depends = ['ddu.vim']
#[[plugins]]
#repo = 'Shougo/ddu-ui-filer.vim'
#depends = ['ddu.vim', 'ddu-source-file', 'ddu-column-filename.vim', 'ddu-kind-file']
#hook_add = '''
#  call ddu#custom#patch_global('filer', {
#    \   'ui': 'filer',
#    \   'sources': [{'name': 'file', 'params': {}}],
#    \   'sourceOptions': {
#    \     '_': {
#    \       'columns': ['filename'],
#    \     },
#    \   },
#    \   'kindOptions': {
#    \     'file': {
#    \       'defaultAction': 'open',
#    \     },
#    \   },
#    \   'uiParams': {
#    \     'filer': {
#    \       'split': 'floating',
#    \     }
#    \   }
#    \ })
#'''

#  call ddu#custom#patch_local('filer', {
#    \   'ui': 'filer',
#    \   'sources': [{'name':'file', 'params':{}}],
#    \   'actionOptions': {
#    \     'narrow': {
#    \       'quit': v:false,
#    \     },
#    \   },
#    \   'uiParams': {
#    \     'filer': {
#    \       'split': 'vertical',
#    \       'splitDirection': 'topleft',
#    \       'winWidth': 5,
#    \     },
#    \   },
#    \ })
#
#  autocmd FileType ddu-filer call s:ddu_filer_my_settings()
#  function! s:ddu_filer_my_settings() abort
#    nnoremap <buffer> <CR>
#    \ <Cmd>call ddu#ui#filer#do_action('itemAction')<CR>
#    nnoremap <buffer> o
#    \ <Cmd>call ddu#ui#filer#do_action('expandItem')<CR>
#  endfunction
#
#  nmap <silent> ;f <Cmd>call ddu#start({'name': 'filer'})<CR>


# ----- defx Filer -----
[[plugins]]
repo = 'ryanoasis/vim-devicons'

[[plugins]]
repo = 'kristijanhusak/defx-icons'

[[plugins]]
repo = 'kristijanhusak/defx-git'
hook_add = '''
  call defx#custom#column('git', 'indicators', {
      \ 'Modified'  : '✹',
      \ 'Staged'    : '✚',
      \ 'Untracked' : '✭',
      \ 'Renamed'   : '➜',
      \ 'Unmerged'  : '═',
      \ 'Ignored'   : '☒',
      \ 'Deleted'   : '✖',
      \ 'Unknown'   : '?'
      \ })
'''

# https://github.com/Shougo/defx.nvim/blob/master/doc/defx.txt
# https://qiita.com/arks22/items/9688ec7f4cb43444e9d9
[[plugins]]
repo = 'Shougo/defx.nvim'
depends = ['vim-devicons', 'defx-icons', 'defx-git']
hook_add = '''
  call defx#custom#option('_', {
      \ 'winwidth': 40,
      \ 'split': 'vertical',
      \ 'direction': 'topleft',
      \ 'show_ignored_files': 0,
      \ 'buffer_name': 'exlorer',
      \ 'toggle': 1,
      \ 'resume': 1,
      \ 'columns': 'git:indent:icons:filename:mark',
      \ })

	autocmd FileType defx call s:defx_my_settings()
	function! s:defx_my_settings() abort
	  " Define mappings
	  nnoremap <silent><buffer><expr> <CR>
    \ defx#is_directory() ?
    \ defx#do_action('open_tree', 'toggle') :
	  \ defx#do_action('open', 'choose')
	  nnoremap <silent><buffer><expr> o
    \ defx#is_directory() ?
    \ defx#do_action('open_directory') :
	  \ defx#do_action('open', 'choose')
	  nnoremap <silent><buffer><expr> <BS>
	  \ defx#do_action('cd', ['..'])
	  nnoremap <silent><buffer><expr> ~
	  \ defx#do_action('cd')
	  nnoremap <silent><buffer><expr> c
	  \ defx#do_action('copy')
	  nnoremap <silent><buffer><expr> m
	  \ defx#do_action('move')
	  nnoremap <silent><buffer><expr> p
	  \ defx#do_action('paste')
	  nnoremap <silent><buffer><expr> s
	  \ defx#do_action('open', 'split')
	  nnoremap <silent><buffer><expr> E
	  \ defx#do_action('open', 'vsplit')
	  nnoremap <silent><buffer><expr> P
	  \ defx#do_action('preview')
	  nnoremap <silent><buffer><expr> t
	  \ defx#do_action('open_tree', 'toggle')
	  nnoremap <silent><buffer><expr> h
	  \ defx#do_action('close_tree')
	  nnoremap <silent><buffer><expr> K
	  \ defx#do_action('new_directory')
	  nnoremap <silent><buffer><expr> N
	  \ defx#do_action('new_file')
	  nnoremap <silent><buffer><expr> M
	  \ defx#do_action('new_multiple_files')
	  nnoremap <silent><buffer><expr> C
	  \ defx#do_action('toggle_columns',
	  \                'mark:indent:icon:filename:type:size:time')
	  nnoremap <silent><buffer><expr> S
	  \ defx#do_action('toggle_sort', 'time')
	  nnoremap <silent><buffer><expr> d
	  \ defx#do_action('remove')
	  nnoremap <silent><buffer><expr> r
	  \ defx#do_action('rename')
	  nnoremap <silent><buffer><expr> !
	  \ defx#do_action('execute_command')
	  nnoremap <silent><buffer><expr> x
	  \ defx#do_action('execute_system')
	  nnoremap <silent><buffer><expr> yy
	  \ defx#do_action('yank_path')
	  nnoremap <silent><buffer><expr> .
	  \ defx#do_action('toggle_ignored_files')
	  nnoremap <silent><buffer><expr> ;
	  \ defx#do_action('repeat')
	  nnoremap <silent><buffer><expr> q
	  \ defx#do_action('quit')
	  nnoremap <silent><buffer><expr> <Space>
	  \ defx#do_action('toggle_select') . 'j'
	  nnoremap <silent><buffer><expr> *
	  \ defx#do_action('toggle_select_all')
	  nnoremap <silent><buffer><expr> j
	  \ line('.') == line('$') ? 'gg' : 'j'
	  nnoremap <silent><buffer><expr> k
	  \ line('.') == 1 ? 'G' : 'k'
	  nnoremap <silent><buffer><expr> <C-l>
	  \ defx#do_action('redraw')
	  nnoremap <silent><buffer><expr> <C-g>
	  \ defx#do_action('print')
	  nnoremap <silent><buffer><expr> cd
	  \ defx#do_action('change_vim_cwd')
	endfunction

  " 起動時に Defx を開く
  "autocmd VimEnter * execute 'Defx'
  " \f で Defx を開く
  nnoremap <silent> <Leader>f :<C-u> Defx <CR>

  " 外部でファイル更新された場合を考慮し、バッファ切替時に再描画させる
  " https://qiita.com/arks22/items/9688ec7f4cb43444e9d9
  autocmd BufWritePost * call defx#redraw()
  autocmd BufEnter * call defx#redraw()
'''


# ----- Language Server Protocol -----

#[[plugins]]
#repo = 'prabirshrestha/vim-lsp'
#
#[[plugins]]
#repo = 'mattn/vim-lsp-settings'
#hook_add = '''
#  " Show diagnostics message to status line
#  let g:lsp_diagnostics_echo_cursor = 1
#'''


