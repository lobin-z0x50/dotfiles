# [[plugins]]
# repo = 'Shougo/neocomplete'
# if = 'has("lua")'
# on_i = 1

# [[plugins]]
# repo = 'Shougo/deoplete.nvim'
# if = 'has("nvim")'
# on_i = 1

# Toml syntax
[[plugins]]
repo = 'cespare/vim-toml'
on_ft = ['toml']

# Markdown
[[plugins]]
repo = 'plasticboy/vim-markdown'
on_ft = ['markdown']

# *css
[[plugins]]
repo = 'hail2u/vim-css3-syntax'
on_ft = ['css','scss','sass']

[[plugins]]
repo = 'cakebaker/scss-syntax.vim'
on_ft = ['css','scss','sass']

# TypeScript syntax
[[plugins]]
repo = 'delphinus35/typescript-vim'
rev  = 'colorize-template-strings'
on_ft = ['typescript']

# Vue
[[plugins]]
repo = 'posva/vim-vue'
on_ft = ['vue']


# ----- ddc "Dark deno-powered completion" -----

[[plugins]]
repo = 'Shougo/ddc.vim'
on_event = 'InsertEnter'
depends = ['denops.vim']
hook_source = '''
  call ddc#custom#patch_global('sources', ['around', 'vsnip'])
  call ddc#custom#patch_global('sourceOptions', {
      \ '_': {
      \ 'matchers': ['matcher_head'],
      \ 'sorters': ['sorter_rank'],
      \ 'converters': ['converter_remove_overlap'],
      \ },
      \ 'around': {'mark': 'A'},
      \ })

  " Change source options
  call ddc#custom#patch_global('sourceParams', {
      \ 'around': {'maxSize': 500},
      \ })

  " Customize settings on a filetype
  call ddc#custom#patch_filetype(['c', 'cpp'], 'sources', ['around', 'clangd'])
  call ddc#custom#patch_filetype(['c', 'cpp'], 'sourceOptions', {
      \ 'clangd': {'mark': 'C'},
      \ })
  call ddc#custom#patch_filetype('markdown', 'sourceParams', {
      \ 'around': {'maxSize': 100},
      \ })

  " <TAB>: completion.
  inoremap <silent><expr> <TAB>
      \ ddc#map#pum_visible() ? '<C-n>' :
      \ (col('.') <= 1 <Bar><Bar> getline('.')[col('.') - 2] =~# '\s') ?
      \ '<TAB>' : ddc#map#manual_complete()
  " <S-TAB>: completion back.
  inoremap <expr><S-TAB>  ddc#map#pum_visible() ? '<C-p>' : '<C-h>'

  call ddc#enable()
'''

# カーソル周辺の既出単語を補完する ddc source
[[plugins]]
repo = 'Shougo/ddc-around.vim'
on_source = 'ddc.vim'

# ファイル名を補完する ddc source
[[plugins]]
repo = 'LumaKernel/ddc-file'
on_source = 'ddc.vim'

# 入力中の単語を補完の対象にする ddc filter
[[plugins]]
repo = 'Shougo/ddc-matcher_head'
on_source = 'ddc.vim'

# 補完候補を適切にソートする ddc filter
[[plugins]]
repo = 'Shougo/ddc-sorter_rank'
on_source = 'ddc.vim'

# 補完候補の重複を防ぐための ddc filter
[[plugins]]
repo = 'Shougo/ddc-converter_remove_overlap'
on_source = 'ddc.vim'

# 補完を確定させた後の調整を上手くやってくれるプラグイン
[[plugins]]
repo = 'hrsh7th/vim-vsnip'
on_event = 'InsertEnter'
depends = ['vim-vsnip-integ', 'friendly-snippets']
hook_add = '''
  imap <expr> <C-j> vsnip#expandable() ? '<Plug>(vsnip-expand)' : '<C-j>'
  smap <expr> <C-j> vsnip#expandable() ? '<Plug>(vsnip-expand)' : '<C-j>'
  imap <expr> <C-f> vsnip#jumpable(1)  ? '<Plug>(vsnip-jump-next)' : '<C-f>'
  smap <expr> <C-f> vsnip#jumpable(1)  ? '<Plug>(vsnip-jump-next)' : '<C-f>'
  imap <expr> <C-b> vsnip#jumpable(-1) ? '<Plug>(vsnip-jump-prev)' : '<C-b>'
  smap <expr> <C-b> vsnip#jumpable(-1) ? '<Plug>(vsnip-jump-prev)' : '<C-b>'
  let g:vsnip_filetypes = {}
'''

[[plugins]]
repo = 'hrsh7th/vim-vsnip-integ'
on_source = 'vim-vsnip'

[[plugins]]
repo = 'rafamadriz/friendly-snippets'
on_source = 'vim-vsnip'

